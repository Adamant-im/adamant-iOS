//
//  TransactionEntity.swift
//
//
//  Created by Stanislav Jelezoglo on 13.12.2023.
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public struct TransactionEntity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    public var module: String = String()
    
    public var command: String = String()
    
    public var nonce: UInt64 = 0
    
    public var fee: UInt64 = 0
    
    public var senderPublicKey: Data = Data()
    
    public var params: TransactionEntity.Params {
        get {return _params ?? TransactionEntity.Params()}
        set {_params = newValue}
    }
    /// Returns true if `params` has been explicitly set.
    var hasParams: Bool {return self._params != nil}
    /// Clears the value of `params`. Subsequent reads from it will return its default value.
    mutating func clearParams() {self._params = nil}
    
    public var signatures: [Data] = []
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public struct Params {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.
        
        public var tokenID: Data = Data()
        
        public var amount: UInt64 = 0
        
        public var recipientAddressBinary: Data = Data()
        
        public var data: String = String()
        
        public var unknownFields = SwiftProtobuf.UnknownStorage()
        
        public init() {}
    }
    
    public init() {}
    
    fileprivate var _params: TransactionEntity.Params? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension TransactionEntity: @unchecked Sendable {}
extension TransactionEntity.Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension TransactionEntity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "TransactionEntity"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "module"),
        2: .same(proto: "command"),
        3: .same(proto: "nonce"),
        4: .same(proto: "fee"),
        5: .same(proto: "senderPublicKey"),
        6: .same(proto: "params"),
        7: .same(proto: "signatures"),
    ]
    
    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.module) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.command) }()
            case 3: try { try decoder.decodeSingularUInt64Field(value: &self.nonce) }()
            case 4: try { try decoder.decodeSingularUInt64Field(value: &self.fee) }()
            case 5: try { try decoder.decodeSingularBytesField(value: &self.senderPublicKey) }()
            case 6: try { try decoder.decodeSingularMessageField(value: &self._params) }()
            case 7: try { try decoder.decodeRepeatedBytesField(value: &self.signatures) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !self.module.isEmpty {
            try visitor.visitSingularStringField(value: self.module, fieldNumber: 1)
        }
        if !self.command.isEmpty {
            try visitor.visitSingularStringField(value: self.command, fieldNumber: 2)
        }
        try visitor.visitSingularUInt64Field(value: self.nonce, fieldNumber: 3)
        if self.fee != 0 {
            try visitor.visitSingularUInt64Field(value: self.fee, fieldNumber: 4)
        }
        if !self.senderPublicKey.isEmpty {
            try visitor.visitSingularBytesField(value: self.senderPublicKey, fieldNumber: 5)
        }
        try { if let v = self._params {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
        } }()
        if !self.signatures.isEmpty {
            try visitor.visitRepeatedBytesField(value: self.signatures, fieldNumber: 7)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: TransactionEntity, rhs: TransactionEntity) -> Bool {
        if lhs.module != rhs.module {return false}
        if lhs.command != rhs.command {return false}
        if lhs.nonce != rhs.nonce {return false}
        if lhs.fee != rhs.fee {return false}
        if lhs.senderPublicKey != rhs.senderPublicKey {return false}
        if lhs._params != rhs._params {return false}
        if lhs.signatures != rhs.signatures {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension TransactionEntity.Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = TransactionEntity.protoMessageName + ".Params"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "tokenID"),
        2: .same(proto: "amount"),
        3: .same(proto: "recipientAddressBinary"),
        4: .same(proto: "data"),
    ]
    
    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularBytesField(value: &self.tokenID) }()
            case 2: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
            case 3: try { try decoder.decodeSingularBytesField(value: &self.recipientAddressBinary) }()
            case 4: try { try decoder.decodeSingularStringField(value: &self.data) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.tokenID.isEmpty {
            try visitor.visitSingularBytesField(value: self.tokenID, fieldNumber: 1)
        }
        if self.amount != 0 {
            try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 2)
        }
        if !self.recipientAddressBinary.isEmpty {
            try visitor.visitSingularBytesField(value: self.recipientAddressBinary, fieldNumber: 3)
        }
        try visitor.visitSingularStringField(value: self.data, fieldNumber: 4)
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: TransactionEntity.Params, rhs: TransactionEntity.Params) -> Bool {
        if lhs.tokenID != rhs.tokenID {return false}
        if lhs.amount != rhs.amount {return false}
        if lhs.recipientAddressBinary != rhs.recipientAddressBinary {return false}
        if lhs.data != rhs.data {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
